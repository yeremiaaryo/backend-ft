// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/shop/interface.go

// Package mock_shop_interface is a generated GoMock package.
package mock_shop_interface

import (
	shop "backend-ft/common/shop"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockShopInterface is a mock of ShopInterface interface
type MockShopInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShopInterfaceMockRecorder
}

// MockShopInterfaceMockRecorder is the mock recorder for MockShopInterface
type MockShopInterfaceMockRecorder struct {
	mock *MockShopInterface
}

// NewMockShopInterface creates a new mock instance
func NewMockShopInterface(ctrl *gomock.Controller) *MockShopInterface {
	mock := &MockShopInterface{ctrl: ctrl}
	mock.recorder = &MockShopInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShopInterface) EXPECT() *MockShopInterfaceMockRecorder {
	return m.recorder
}

// Checkout mocks base method
func (m *MockShopInterface) Checkout(input shop.CheckoutRequest) (*shop.CheckoutResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", input)
	ret0, _ := ret[0].(*shop.CheckoutResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout
func (mr *MockShopInterfaceMockRecorder) Checkout(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockShopInterface)(nil).Checkout), input)
}

// GetCartByUserID mocks base method
func (m *MockShopInterface) GetCartByUserID(userID int64) ([]shop.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserID", userID)
	ret0, _ := ret[0].([]shop.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByUserID indicates an expected call of GetCartByUserID
func (mr *MockShopInterfaceMockRecorder) GetCartByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserID", reflect.TypeOf((*MockShopInterface)(nil).GetCartByUserID), userID)
}

// UpsertCart mocks base method
func (m *MockShopInterface) UpsertCart(userId int64, cart shop.Cart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCart", userId, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCart indicates an expected call of UpsertCart
func (mr *MockShopInterfaceMockRecorder) UpsertCart(userId, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCart", reflect.TypeOf((*MockShopInterface)(nil).UpsertCart), userId, cart)
}
